<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/dao/postgres/PrenotazioneImplementazionePostgresDAO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/dao/postgres/PrenotazioneImplementazionePostgresDAO.java" />
              <option name="originalContent" value="package dao.postgres;&#10;&#10;import dao.PrenotazioneDAO;&#10;import dao.util.ConnessioneDatabase;&#10;import model.prenotazione.Prenotazione;&#10;import model.prenotazione.StatoPrenotazione;&#10;import model.volo.Volo;&#10;import model.volo.VoloInPartenza;&#10;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.logging.Logger;&#10;import java.util.logging.Level;&#10;&#10;// ******************************************************************************************&#10;//  **************** CLASSE PRENOTAZIONE IMPLEMENTAZIONE POSTGRES DAO ************************&#10;//   ******************************************************************************************&#10;&#10;/**&#10; * Implementazione PostgreSQL del DAO per le Prenotazioni.&#10; * Segue le indicazioni del professore per l'uso di JDBC.&#10; */&#10;public class PrenotazioneImplementazionePostgresDAO implements PrenotazioneDAO {&#10;    /** Logger per la classe. */&#10;    private static final Logger logger = Logger.getLogger(PrenotazioneImplementazionePostgresDAO.class.getName());&#10;&#10;    /** Costanti per i nomi delle colonne del database. */&#10;    private static final String NUMERO_BIGLIETTO = &quot;numero_biglietto&quot;;&#10;    private static final String NOME_PASSEGGERO = &quot;nome_passeggero&quot;;&#10;    private static final String POSTO_ASSEGNATO = &quot;posto_assegnato&quot;;&#10;    private static final String STATO_PRENOTAZIONE = &quot;stato_prenotazione&quot;;&#10;    private static final String CODICE_VOLO = &quot;codice_volo&quot;;&#10;&#10;    /** Costanti per i messaggi di log. */&#10;    private static final String SUCCESSO = &quot;SUCCESSO&quot;;&#10;    private static final String FALLITO = &quot;FALLITO&quot;;&#10;    private static final String RIGHE_AFFECTED = &quot; - Righe affected: &quot;;&#10;&#10;    /** Connessione al database. */&#10;    private Connection connection;&#10;&#10;    /**&#10;     * Costruttore che inizializza la connessione al database.&#10;     */&#10;    public PrenotazioneImplementazionePostgresDAO() {&#10;        try {&#10;            connection = ConnessioneDatabase.getInstance().connection;&#10;        } catch (SQLException e) {&#10;            logger.log(Level.SEVERE, &quot;Errore durante l'inizializzazione della connessione al database&quot;, e);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Restituisce la lista di tutte le prenotazioni presenti nel database.&#10;     * @return lista di prenotazioni&#10;     */&#10;    @Override&#10;    public List&lt;Prenotazione&gt; findAll() {&#10;        List&lt;Prenotazione&gt; prenotazioni = new ArrayList&lt;&gt;();&#10;        String querySQL = &quot;SELECT \&quot;numero_biglietto\&quot;, \&quot;nome_passeggero\&quot;, \&quot;posto_assegnato\&quot;, \&quot;stato_prenotazione\&quot;, \&quot;codice_volo\&quot; FROM public.\&quot;prenotazione\&quot;&quot;;&#10;&#10;        try (PreparedStatement query = connection.prepareStatement(querySQL);&#10;             ResultSet rs = query.executeQuery()) {&#10;&#10;            while (rs.next()) {&#10;                String numeroBiglietto = rs.getString(NUMERO_BIGLIETTO);&#10;                String nomePasseggero = rs.getString(NOME_PASSEGGERO);&#10;                String postoAssegnato = rs.getString(POSTO_ASSEGNATO);&#10;                String statoStr = rs.getString(STATO_PRENOTAZIONE);&#10;                String codiceVolo = rs.getString(CODICE_VOLO);&#10;&#10;                Prenotazione prenotazione = new Prenotazione(nomePasseggero, numeroBiglietto, postoAssegnato);&#10;                prenotazione.setStatoDellaPrenotazione(StatoPrenotazione.valueOf(statoStr));&#10;&#10;                if (codiceVolo != null &amp;&amp; !codiceVolo.trim().isEmpty()) {&#10;                    VoloImplementazionePostgresDAO voloDAO = new VoloImplementazionePostgresDAO();&#10;                    Volo volo = voloDAO.findByCodice(codiceVolo);&#10;                    if (volo instanceof VoloInPartenza voloInPartenza) {&#10;                        prenotazione.setVoloInPartenza(voloInPartenza);&#10;                    }&#10;                }&#10;&#10;                prenotazioni.add(prenotazione);&#10;            }&#10;        } catch (SQLException e) {&#10;            logger.log(Level.SEVERE, &quot;Errore durante il recupero delle prenotazioni&quot;, e);&#10;        }&#10;&#10;        return prenotazioni;&#10;    }&#10;&#10;    /**&#10;     * Trova una prenotazione tramite il numero del biglietto.&#10;     * @param numeroBiglietto numero del biglietto&#10;     * @return la prenotazione trovata, null se non esiste&#10;     */&#10;    @Override&#10;    public Prenotazione findByNumeroBiglietto(String numeroBiglietto) {&#10;        String querySQL = &quot;SELECT \&quot;numero_biglietto\&quot;, \&quot;nome_passeggero\&quot;, \&quot;posto_assegnato\&quot;, \&quot;stato_prenotazione\&quot; FROM public.\&quot;prenotazione\&quot; WHERE \&quot;numero_biglietto\&quot; = ?&quot;;&#10;&#10;        try (PreparedStatement query = connection.prepareStatement(querySQL)) {&#10;            query.setString(1, numeroBiglietto);&#10;&#10;            try (ResultSet rs = query.executeQuery()) {&#10;                if (rs.next()) {&#10;                    String nomePasseggero = rs.getString(NOME_PASSEGGERO);&#10;                    String postoAssegnato = rs.getString(POSTO_ASSEGNATO);&#10;                    String statoStr = rs.getString(STATO_PRENOTAZIONE);&#10;&#10;                    Prenotazione prenotazione = new Prenotazione(nomePasseggero, numeroBiglietto, postoAssegnato);&#10;                    prenotazione.setStatoDellaPrenotazione(StatoPrenotazione.valueOf(statoStr));&#10;                    return prenotazione;&#10;                }&#10;            }&#10;        } catch (SQLException e) {&#10;            logger.log(Level.SEVERE, &quot;Errore durante la ricerca della prenotazione con numero: &quot; + numeroBiglietto, e);&#10;        }&#10;&#10;        return null;&#10;    }&#10;&#10;    /**&#10;     * Trova le prenotazioni tramite il nome del passeggero.&#10;     * @param nomePasseggero nome del passeggero&#10;     * @return lista delle prenotazioni trovate&#10;     */&#10;    @Override&#10;    public List&lt;Prenotazione&gt; findByNomePasseggero(String nomePasseggero) {&#10;        List&lt;Prenotazione&gt; risultati = new ArrayList&lt;&gt;();&#10;        String querySQL = &quot;SELECT \&quot;numero_biglietto\&quot;, \&quot;nome_passeggero\&quot;, \&quot;posto_assegnato\&quot;, \&quot;stato_prenotazione\&quot;, \&quot;codice_volo\&quot; FROM public.\&quot;prenotazione\&quot;&quot;;&#10;        if (nomePasseggero != null &amp;&amp; !nomePasseggero.trim().isEmpty()) {&#10;            querySQL += &quot; WHERE \&quot;nome_passeggero\&quot; ILIKE ?&quot;;&#10;        }&#10;&#10;        try (PreparedStatement query = connection.prepareStatement(querySQL)) {&#10;            if (nomePasseggero != null &amp;&amp; !nomePasseggero.trim().isEmpty()) {&#10;                query.setString(1, &quot;%&quot; + nomePasseggero + &quot;%&quot;);&#10;            }&#10;&#10;            try (ResultSet rs = query.executeQuery()) {&#10;                while (rs.next()) {&#10;                    String numeroBiglietto = rs.getString(NUMERO_BIGLIETTO);&#10;                    String nomePasseggeroDB = rs.getString(NOME_PASSEGGERO);&#10;                    String postoAssegnato = rs.getString(POSTO_ASSEGNATO);&#10;                    String statoStr = rs.getString(STATO_PRENOTAZIONE);&#10;                    String codiceVolo = rs.getString(CODICE_VOLO);&#10;&#10;                    Prenotazione prenotazione = new Prenotazione(nomePasseggeroDB, numeroBiglietto, postoAssegnato);&#10;                    prenotazione.setStatoDellaPrenotazione(StatoPrenotazione.valueOf(statoStr));&#10;&#10;                    if (codiceVolo != null &amp;&amp; !codiceVolo.trim().isEmpty()) {&#10;                        VoloImplementazionePostgresDAO voloDAO = new VoloImplementazionePostgresDAO();&#10;                        Volo volo = voloDAO.findByCodice(codiceVolo);&#10;                        if (volo instanceof VoloInPartenza voloInPartenza) {&#10;                            prenotazione.setVoloInPartenza(voloInPartenza);&#10;                        }&#10;                    }&#10;                    risultati.add(prenotazione);&#10;                }&#10;            }&#10;        } catch (SQLException e) {&#10;            logger.log(Level.SEVERE, &quot;Errore durante la ricerca per nome passeggero&quot;, e);&#10;        }&#10;&#10;        return risultati;&#10;    }&#10;&#10;    /**&#10;     * Trova le prenotazioni tramite il codice del volo.&#10;     * @param codiceVolo codice del volo&#10;     * @return lista delle prenotazioni trovate&#10;     */&#10;    @Override&#10;    public List&lt;Prenotazione&gt; findByCodiceVolo(String codiceVolo) {&#10;        List&lt;Prenotazione&gt; risultati = new ArrayList&lt;&gt;();&#10;        String querySQL = &quot;SELECT \&quot;numero_biglietto\&quot;, \&quot;nome_passeggero\&quot;, \&quot;posto_assegnato\&quot;, \&quot;stato_prenotazione\&quot;, \&quot;codice_volo\&quot; FROM public.\&quot;prenotazione\&quot; WHERE \&quot;codice_volo\&quot; = ?&quot;;&#10;&#10;        try (PreparedStatement query = connection.prepareStatement(querySQL)) {&#10;            query.setString(1, codiceVolo);&#10;&#10;            try (ResultSet rs = query.executeQuery()) {&#10;                while (rs.next()) {&#10;                    String numeroBiglietto = rs.getString(NUMERO_BIGLIETTO);&#10;                    String nomePasseggero = rs.getString(NOME_PASSEGGERO);&#10;                    String postoAssegnato = rs.getString(POSTO_ASSEGNATO);&#10;                    String statoStr = rs.getString(STATO_PRENOTAZIONE);&#10;                    String codiceVoloDB = rs.getString(CODICE_VOLO);&#10;&#10;                    Prenotazione prenotazione = new Prenotazione(nomePasseggero, numeroBiglietto, postoAssegnato);&#10;                    prenotazione.setStatoDellaPrenotazione(StatoPrenotazione.valueOf(statoStr));&#10;&#10;                    if (codiceVoloDB != null &amp;&amp; !codiceVoloDB.trim().isEmpty()) {&#10;                        VoloImplementazionePostgresDAO voloDAO = new VoloImplementazionePostgresDAO();&#10;                        Volo volo = voloDAO.findByCodice(codiceVoloDB);&#10;                        if (volo instanceof VoloInPartenza voloInPartenza) {&#10;                            prenotazione.setVoloInPartenza(voloInPartenza);&#10;                        }&#10;                    }&#10;&#10;                    risultati.add(prenotazione);&#10;                }&#10;            }&#10;        } catch (SQLException e) {&#10;            logger.log(Level.SEVERE, &quot;Errore durante la ricerca per codice volo&quot;, e);&#10;        }&#10;&#10;        return risultati;&#10;    }&#10;&#10;    /**&#10;     * Salva una nuova prenotazione nel database.&#10;     * @param prenotazione prenotazione da salvare&#10;     * @return true se salvata con successo, false altrimenti&#10;     */&#10;    @Override&#10;    public boolean save(Prenotazione prenotazione) {&#10;        String querySQL = &quot;INSERT INTO public.\&quot;prenotazione\&quot; (\&quot;numero_biglietto\&quot;, \&quot;nome_passeggero\&quot;, \&quot;posto_assegnato\&quot;, \&quot;stato_prenotazione\&quot;, \&quot;codice_volo\&quot;, \&quot;utente_login\&quot;) VALUES (?, ?, ?, ?, ?, ?)&quot;;&#10;&#10;        try (PreparedStatement addPrenotazionePS = connection.prepareStatement(querySQL)) {&#10;            addPrenotazionePS.setString(1, prenotazione.getNumeroBiglietto());&#10;            addPrenotazionePS.setString(2, prenotazione.getNomePasseggero());&#10;            addPrenotazionePS.setString(3, prenotazione.getPostoAssegnato());&#10;            addPrenotazionePS.setString(4, prenotazione.getStatoDellaPrenotazione().name());&#10;&#10;            String codiceVolo = &quot;&quot;;&#10;            if (prenotazione.getVoloInPartenza() != null) {&#10;                codiceVolo = prenotazione.getVoloInPartenza().getCodiceVolo();&#10;            }&#10;            addPrenotazionePS.setString(5, codiceVolo);&#10;            addPrenotazionePS.setString(6, &quot;user&quot;);&#10;&#10;            int rowsAffected = addPrenotazionePS.executeUpdate();&#10;&#10;            boolean success = rowsAffected &gt; 0;&#10;            logger.log(Level.INFO, &quot;Inserimento prenotazione: {0}{1}{2}&quot;,&#10;                      new Object[]{success ? SUCCESSO : FALLITO, RIGHE_AFFECTED, rowsAffected});&#10;            return success;&#10;&#10;        } catch (SQLException e) {&#10;            logger.log(Level.SEVERE, &quot;Errore SQL durante inserimento prenotazione&quot;, e);&#10;            return false;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Salva una nuova prenotazione nel database associata a un codice volo.&#10;     * @param prenotazione prenotazione da salvare&#10;     * @param codiceVolo codice del volo associato&#10;     * @return true se salvata con successo, false altrimenti&#10;     */&#10;    @Override&#10;    public boolean save(Prenotazione prenotazione, String codiceVolo) {&#10;        String querySQL = &quot;INSERT INTO public.\&quot;prenotazione\&quot; (\&quot;numero_biglietto\&quot;, \&quot;nome_passeggero\&quot;, \&quot;posto_assegnato\&quot;, \&quot;stato_prenotazione\&quot;, \&quot;codice_volo\&quot;, \&quot;utente_login\&quot;) VALUES (?, ?, ?, ?, ?, ?)&quot;;&#10;&#10;        try (PreparedStatement addPrenotazionePS = connection.prepareStatement(querySQL)) {&#10;            addPrenotazionePS.setString(1, prenotazione.getNumeroBiglietto());&#10;            addPrenotazionePS.setString(2, prenotazione.getNomePasseggero());&#10;            addPrenotazionePS.setString(3, prenotazione.getPostoAssegnato());&#10;            addPrenotazionePS.setString(4, prenotazione.getStatoDellaPrenotazione().name());&#10;            addPrenotazionePS.setString(5, codiceVolo);&#10;            addPrenotazionePS.setString(6, &quot;user&quot;);&#10;&#10;            int rowsAffected = addPrenotazionePS.executeUpdate();&#10;&#10;            boolean success = rowsAffected &gt; 0;&#10;            logger.log(Level.INFO, &quot;Inserimento prenotazione con codice volo: {0}{1}{2}&quot;,&#10;                      new Object[]{success ? SUCCESSO : FALLITO, RIGHE_AFFECTED, rowsAffected});&#10;            return success;&#10;&#10;        } catch (SQLException e) {&#10;            logger.log(Level.SEVERE, &quot;Errore SQL durante inserimento prenotazione con codice volo&quot;, e);&#10;            return false;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Aggiorna una prenotazione esistente nel database.&#10;     * @param numeroBiglietto numero del biglietto&#10;     * @param nuovoNomePasseggero nuovo nome del passeggero&#10;     * @param nuovoPostoAssegnato nuovo posto assegnato&#10;     * @return true se aggiornata con successo, false altrimenti&#10;     */&#10;    @Override&#10;    public boolean update(String numeroBiglietto, String nuovoNomePasseggero, String nuovoPostoAssegnato) {&#10;        String querySQL = &quot;UPDATE public.\&quot;prenotazione\&quot; SET \&quot;nome_passeggero\&quot; = ?, \&quot;posto_assegnato\&quot; = ?, \&quot;stato_prenotazione\&quot; = ? WHERE \&quot;numero_biglietto\&quot; = ?&quot;;&#10;&#10;        try (PreparedStatement updatePrenotazionePS = connection.prepareStatement(querySQL)) {&#10;            updatePrenotazionePS.setString(1, nuovoNomePasseggero);&#10;            updatePrenotazionePS.setString(2, nuovoPostoAssegnato);&#10;            updatePrenotazionePS.setString(3, StatoPrenotazione.IN_ATTESA.name());&#10;            updatePrenotazionePS.setString(4, numeroBiglietto);&#10;&#10;            int rowsAffected = updatePrenotazionePS.executeUpdate();&#10;&#10;            boolean success = rowsAffected &gt; 0;&#10;            logger.log(Level.INFO, &quot;Aggiornamento prenotazione: {0}{1}{2}&quot;,&#10;                      new Object[]{success ? SUCCESSO : FALLITO, RIGHE_AFFECTED, rowsAffected});&#10;            return success;&#10;&#10;        } catch (SQLException e) {&#10;            logger.log(Level.SEVERE, &quot;Errore durante l'aggiornamento della prenotazione&quot;, e);&#10;            return false;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Elimina una prenotazione dal database.&#10;     * @param numeroBiglietto numero del biglietto&#10;     * @return true se eliminata con successo, false altrimenti&#10;     */&#10;    @Override&#10;    public boolean delete(String numeroBiglietto) {&#10;        String querySQL = &quot;DELETE FROM public.\&quot;prenotazione\&quot; WHERE \&quot;numero_biglietto\&quot; = ?&quot;;&#10;&#10;        try (PreparedStatement deletePrenotazionePS = connection.prepareStatement(querySQL)) {&#10;            deletePrenotazionePS.setString(1, numeroBiglietto);&#10;            int rowsAffected = deletePrenotazionePS.executeUpdate();&#10;            return rowsAffected &gt; 0;&#10;        } catch (SQLException e) {&#10;            logger.log(Level.SEVERE, &quot;Errore durante l'eliminazione della prenotazione&quot;, e);&#10;            return false;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package dao.postgres;&#13;&#10;&#13;&#10;import dao.PrenotazioneDAO;&#13;&#10;import dao.util.ConnessioneDatabase;&#13;&#10;import model.prenotazione.Prenotazione;&#13;&#10;import model.prenotazione.StatoPrenotazione;&#13;&#10;import model.volo.Volo;&#13;&#10;import model.volo.VoloInPartenza;&#13;&#10;&#13;&#10;import java.sql.*;&#13;&#10;import java.util.ArrayList;&#13;&#10;import java.util.List;&#13;&#10;import java.util.logging.Logger;&#13;&#10;import java.util.logging.Level;&#13;&#10;&#13;&#10;// ******************************************************************************************&#13;&#10;//  **************** CLASSE PRENOTAZIONE IMPLEMENTAZIONE POSTGRES DAO ************************&#13;&#10;//   ******************************************************************************************&#13;&#10;&#13;&#10;/**&#13;&#10; * Implementazione PostgreSQL del DAO per le Prenotazioni.&#13;&#10; * Segue le indicazioni del professore per l'uso di JDBC.&#13;&#10; */&#13;&#10;public class PrenotazioneImplementazionePostgresDAO implements PrenotazioneDAO {&#13;&#10;    /** Logger per la classe. */&#13;&#10;    private static final Logger logger = Logger.getLogger(PrenotazioneImplementazionePostgresDAO.class.getName());&#13;&#10;&#13;&#10;    /** Costanti per i nomi delle colonne del database. */&#13;&#10;    private static final String NUMERO_BIGLIETTO = &quot;numero_biglietto&quot;;&#13;&#10;    private static final String NOME_PASSEGGERO = &quot;nome_passeggero&quot;;&#13;&#10;    private static final String POSTO_ASSEGNATO = &quot;posto_assegnato&quot;;&#13;&#10;    private static final String STATO_PRENOTAZIONE = &quot;stato_prenotazione&quot;;&#13;&#10;    private static final String CODICE_VOLO = &quot;codice_volo&quot;;&#13;&#10;&#13;&#10;    /** Costanti per i messaggi di log. */&#13;&#10;    private static final String SUCCESSO = &quot;SUCCESSO&quot;;&#13;&#10;    private static final String FALLITO = &quot;FALLITO&quot;;&#13;&#10;    private static final String RIGHE_AFFECTED = &quot; - Righe affected: &quot;;&#13;&#10;&#13;&#10;    /** Connessione al database. */&#13;&#10;    private Connection connection;&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Costruttore che inizializza la connessione al database.&#13;&#10;     */&#13;&#10;    public PrenotazioneImplementazionePostgresDAO() {&#13;&#10;        try {&#13;&#10;            connection = ConnessioneDatabase.getInstance().getConnection();&#13;&#10;        } catch (SQLException e) {&#13;&#10;            logger.log(Level.SEVERE, &quot;Errore durante l'inizializzazione della connessione al database&quot;, e);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Restituisce la lista di tutte le prenotazioni presenti nel database.&#13;&#10;     * @return lista di prenotazioni&#13;&#10;     */&#13;&#10;    @Override&#13;&#10;    public List&lt;Prenotazione&gt; findAll() {&#13;&#10;        List&lt;Prenotazione&gt; prenotazioni = new ArrayList&lt;&gt;();&#13;&#10;        String querySQL = &quot;SELECT \&quot;numero_biglietto\&quot;, \&quot;nome_passeggero\&quot;, \&quot;posto_assegnato\&quot;, \&quot;stato_prenotazione\&quot;, \&quot;codice_volo\&quot; FROM public.\&quot;prenotazione\&quot;&quot;;&#13;&#10;&#13;&#10;        try (PreparedStatement query = connection.prepareStatement(querySQL);&#13;&#10;             ResultSet rs = query.executeQuery()) {&#13;&#10;&#13;&#10;            while (rs.next()) {&#13;&#10;                String numeroBiglietto = rs.getString(NUMERO_BIGLIETTO);&#13;&#10;                String nomePasseggero = rs.getString(NOME_PASSEGGERO);&#13;&#10;                String postoAssegnato = rs.getString(POSTO_ASSEGNATO);&#13;&#10;                String statoStr = rs.getString(STATO_PRENOTAZIONE);&#13;&#10;                String codiceVolo = rs.getString(CODICE_VOLO);&#13;&#10;&#13;&#10;                Prenotazione prenotazione = new Prenotazione(nomePasseggero, numeroBiglietto, postoAssegnato);&#13;&#10;                prenotazione.setStatoDellaPrenotazione(StatoPrenotazione.valueOf(statoStr));&#13;&#10;&#13;&#10;                if (codiceVolo != null &amp;&amp; !codiceVolo.trim().isEmpty()) {&#13;&#10;                    VoloImplementazionePostgresDAO voloDAO = new VoloImplementazionePostgresDAO();&#13;&#10;                    Volo volo = voloDAO.findByCodice(codiceVolo);&#13;&#10;                    if (volo instanceof VoloInPartenza voloInPartenza) {&#13;&#10;                        prenotazione.setVoloInPartenza(voloInPartenza);&#13;&#10;                    }&#13;&#10;                }&#13;&#10;&#13;&#10;                prenotazioni.add(prenotazione);&#13;&#10;            }&#13;&#10;        } catch (SQLException e) {&#13;&#10;            logger.log(Level.SEVERE, &quot;Errore durante il recupero delle prenotazioni&quot;, e);&#13;&#10;        }&#13;&#10;&#13;&#10;        return prenotazioni;&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Trova una prenotazione tramite il numero del biglietto.&#13;&#10;     * @param numeroBiglietto numero del biglietto&#13;&#10;     * @return la prenotazione trovata, null se non esiste&#13;&#10;     */&#13;&#10;    @Override&#13;&#10;    public Prenotazione findByNumeroBiglietto(String numeroBiglietto) {&#13;&#10;        String querySQL = &quot;SELECT \&quot;numero_biglietto\&quot;, \&quot;nome_passeggero\&quot;, \&quot;posto_assegnato\&quot;, \&quot;stato_prenotazione\&quot; FROM public.\&quot;prenotazione\&quot; WHERE \&quot;numero_biglietto\&quot; = ?&quot;;&#13;&#10;&#13;&#10;        try (PreparedStatement query = connection.prepareStatement(querySQL)) {&#13;&#10;            query.setString(1, numeroBiglietto);&#13;&#10;&#13;&#10;            try (ResultSet rs = query.executeQuery()) {&#13;&#10;                if (rs.next()) {&#13;&#10;                    String nomePasseggero = rs.getString(NOME_PASSEGGERO);&#13;&#10;                    String postoAssegnato = rs.getString(POSTO_ASSEGNATO);&#13;&#10;                    String statoStr = rs.getString(STATO_PRENOTAZIONE);&#13;&#10;&#13;&#10;                    Prenotazione prenotazione = new Prenotazione(nomePasseggero, numeroBiglietto, postoAssegnato);&#13;&#10;                    prenotazione.setStatoDellaPrenotazione(StatoPrenotazione.valueOf(statoStr));&#13;&#10;                    return prenotazione;&#13;&#10;                }&#13;&#10;            }&#13;&#10;        } catch (SQLException e) {&#13;&#10;            logger.log(Level.SEVERE, &quot;Errore durante la ricerca della prenotazione con numero: &quot; + numeroBiglietto, e);&#13;&#10;        }&#13;&#10;&#13;&#10;        return null;&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Trova le prenotazioni tramite il nome del passeggero.&#13;&#10;     * @param nomePasseggero nome del passeggero&#13;&#10;     * @return lista delle prenotazioni trovate&#13;&#10;     */&#13;&#10;    @Override&#13;&#10;    public List&lt;Prenotazione&gt; findByNomePasseggero(String nomePasseggero) {&#13;&#10;        List&lt;Prenotazione&gt; risultati = new ArrayList&lt;&gt;();&#13;&#10;        String querySQL = &quot;SELECT \&quot;numero_biglietto\&quot;, \&quot;nome_passeggero\&quot;, \&quot;posto_assegnato\&quot;, \&quot;stato_prenotazione\&quot;, \&quot;codice_volo\&quot; FROM public.\&quot;prenotazione\&quot;&quot;;&#13;&#10;        if (nomePasseggero != null &amp;&amp; !nomePasseggero.trim().isEmpty()) {&#13;&#10;            querySQL += &quot; WHERE \&quot;nome_passeggero\&quot; ILIKE ?&quot;;&#13;&#10;        }&#13;&#10;&#13;&#10;        try (PreparedStatement query = connection.prepareStatement(querySQL)) {&#13;&#10;            if (nomePasseggero != null &amp;&amp; !nomePasseggero.trim().isEmpty()) {&#13;&#10;                query.setString(1, &quot;%&quot; + nomePasseggero + &quot;%&quot;);&#13;&#10;            }&#13;&#10;&#13;&#10;            try (ResultSet rs = query.executeQuery()) {&#13;&#10;                while (rs.next()) {&#13;&#10;                    String numeroBiglietto = rs.getString(NUMERO_BIGLIETTO);&#13;&#10;                    String nomePasseggeroDB = rs.getString(NOME_PASSEGGERO);&#13;&#10;                    String postoAssegnato = rs.getString(POSTO_ASSEGNATO);&#13;&#10;                    String statoStr = rs.getString(STATO_PRENOTAZIONE);&#13;&#10;                    String codiceVolo = rs.getString(CODICE_VOLO);&#13;&#10;&#13;&#10;                    Prenotazione prenotazione = new Prenotazione(nomePasseggeroDB, numeroBiglietto, postoAssegnato);&#13;&#10;                    prenotazione.setStatoDellaPrenotazione(StatoPrenotazione.valueOf(statoStr));&#13;&#10;&#13;&#10;                    if (codiceVolo != null &amp;&amp; !codiceVolo.trim().isEmpty()) {&#13;&#10;                        VoloImplementazionePostgresDAO voloDAO = new VoloImplementazionePostgresDAO();&#13;&#10;                        Volo volo = voloDAO.findByCodice(codiceVolo);&#13;&#10;                        if (volo instanceof VoloInPartenza voloInPartenza) {&#13;&#10;                            prenotazione.setVoloInPartenza(voloInPartenza);&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                    risultati.add(prenotazione);&#13;&#10;                }&#13;&#10;            }&#13;&#10;        } catch (SQLException e) {&#13;&#10;            logger.log(Level.SEVERE, &quot;Errore durante la ricerca per nome passeggero&quot;, e);&#13;&#10;        }&#13;&#10;&#13;&#10;        return risultati;&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Trova le prenotazioni tramite il codice del volo.&#13;&#10;     * @param codiceVolo codice del volo&#13;&#10;     * @return lista delle prenotazioni trovate&#13;&#10;     */&#13;&#10;    @Override&#13;&#10;    public List&lt;Prenotazione&gt; findByCodiceVolo(String codiceVolo) {&#13;&#10;        List&lt;Prenotazione&gt; risultati = new ArrayList&lt;&gt;();&#13;&#10;        String querySQL = &quot;SELECT \&quot;numero_biglietto\&quot;, \&quot;nome_passeggero\&quot;, \&quot;posto_assegnato\&quot;, \&quot;stato_prenotazione\&quot;, \&quot;codice_volo\&quot; FROM public.\&quot;prenotazione\&quot; WHERE \&quot;codice_volo\&quot; = ?&quot;;&#13;&#10;&#13;&#10;        try (PreparedStatement query = connection.prepareStatement(querySQL)) {&#13;&#10;            query.setString(1, codiceVolo);&#13;&#10;&#13;&#10;            try (ResultSet rs = query.executeQuery()) {&#13;&#10;                while (rs.next()) {&#13;&#10;                    String numeroBiglietto = rs.getString(NUMERO_BIGLIETTO);&#13;&#10;                    String nomePasseggero = rs.getString(NOME_PASSEGGERO);&#13;&#10;                    String postoAssegnato = rs.getString(POSTO_ASSEGNATO);&#13;&#10;                    String statoStr = rs.getString(STATO_PRENOTAZIONE);&#13;&#10;                    String codiceVoloDB = rs.getString(CODICE_VOLO);&#13;&#10;&#13;&#10;                    Prenotazione prenotazione = new Prenotazione(nomePasseggero, numeroBiglietto, postoAssegnato);&#13;&#10;                    prenotazione.setStatoDellaPrenotazione(StatoPrenotazione.valueOf(statoStr));&#13;&#10;&#13;&#10;                    if (codiceVoloDB != null &amp;&amp; !codiceVoloDB.trim().isEmpty()) {&#13;&#10;                        VoloImplementazionePostgresDAO voloDAO = new VoloImplementazionePostgresDAO();&#13;&#10;                        Volo volo = voloDAO.findByCodice(codiceVoloDB);&#13;&#10;                        if (volo instanceof VoloInPartenza voloInPartenza) {&#13;&#10;                            prenotazione.setVoloInPartenza(voloInPartenza);&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;&#13;&#10;                    risultati.add(prenotazione);&#13;&#10;                }&#13;&#10;            }&#13;&#10;        } catch (SQLException e) {&#13;&#10;            logger.log(Level.SEVERE, &quot;Errore durante la ricerca per codice volo&quot;, e);&#13;&#10;        }&#13;&#10;&#13;&#10;        return risultati;&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Salva una nuova prenotazione nel database.&#13;&#10;     * @param prenotazione prenotazione da salvare&#13;&#10;     * @return true se salvata con successo, false altrimenti&#13;&#10;     */&#13;&#10;    @Override&#13;&#10;    public boolean save(Prenotazione prenotazione) {&#13;&#10;        String querySQL = &quot;INSERT INTO public.\&quot;prenotazione\&quot; (\&quot;numero_biglietto\&quot;, \&quot;nome_passeggero\&quot;, \&quot;posto_assegnato\&quot;, \&quot;stato_prenotazione\&quot;, \&quot;codice_volo\&quot;, \&quot;utente_login\&quot;) VALUES (?, ?, ?, ?, ?, ?)&quot;;&#13;&#10;&#13;&#10;        try (PreparedStatement addPrenotazionePS = connection.prepareStatement(querySQL)) {&#13;&#10;            addPrenotazionePS.setString(1, prenotazione.getNumeroBiglietto());&#13;&#10;            addPrenotazionePS.setString(2, prenotazione.getNomePasseggero());&#13;&#10;            addPrenotazionePS.setString(3, prenotazione.getPostoAssegnato());&#13;&#10;            addPrenotazionePS.setString(4, prenotazione.getStatoDellaPrenotazione().name());&#13;&#10;&#13;&#10;            String codiceVolo = &quot;&quot;;&#13;&#10;            if (prenotazione.getVoloInPartenza() != null) {&#13;&#10;                codiceVolo = prenotazione.getVoloInPartenza().getCodiceVolo();&#13;&#10;            }&#13;&#10;            addPrenotazionePS.setString(5, codiceVolo);&#13;&#10;            addPrenotazionePS.setString(6, &quot;user&quot;);&#13;&#10;&#13;&#10;            int rowsAffected = addPrenotazionePS.executeUpdate();&#13;&#10;&#13;&#10;            boolean success = rowsAffected &gt; 0;&#13;&#10;            logger.log(Level.INFO, &quot;Inserimento prenotazione: {0}{1}{2}&quot;,&#13;&#10;                      new Object[]{success ? SUCCESSO : FALLITO, RIGHE_AFFECTED, rowsAffected});&#13;&#10;            return success;&#13;&#10;&#13;&#10;        } catch (SQLException e) {&#13;&#10;            logger.log(Level.SEVERE, &quot;Errore SQL durante inserimento prenotazione&quot;, e);&#13;&#10;            return false;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Salva una nuova prenotazione nel database associata a un codice volo.&#13;&#10;     * @param prenotazione prenotazione da salvare&#13;&#10;     * @param codiceVolo codice del volo associato&#13;&#10;     * @return true se salvata con successo, false altrimenti&#13;&#10;     */&#13;&#10;    @Override&#13;&#10;    public boolean save(Prenotazione prenotazione, String codiceVolo) {&#13;&#10;        String querySQL = &quot;INSERT INTO public.\&quot;prenotazione\&quot; (\&quot;numero_biglietto\&quot;, \&quot;nome_passeggero\&quot;, \&quot;posto_assegnato\&quot;, \&quot;stato_prenotazione\&quot;, \&quot;codice_volo\&quot;, \&quot;utente_login\&quot;) VALUES (?, ?, ?, ?, ?, ?)&quot;;&#13;&#10;&#13;&#10;        try (PreparedStatement addPrenotazionePS = connection.prepareStatement(querySQL)) {&#13;&#10;            addPrenotazionePS.setString(1, prenotazione.getNumeroBiglietto());&#13;&#10;            addPrenotazionePS.setString(2, prenotazione.getNomePasseggero());&#13;&#10;            addPrenotazionePS.setString(3, prenotazione.getPostoAssegnato());&#13;&#10;            addPrenotazionePS.setString(4, prenotazione.getStatoDellaPrenotazione().name());&#13;&#10;            addPrenotazionePS.setString(5, codiceVolo);&#13;&#10;            addPrenotazionePS.setString(6, &quot;user&quot;);&#13;&#10;&#13;&#10;            int rowsAffected = addPrenotazionePS.executeUpdate();&#13;&#10;&#13;&#10;            boolean success = rowsAffected &gt; 0;&#13;&#10;            logger.log(Level.INFO, &quot;Inserimento prenotazione con codice volo: {0}{1}{2}&quot;,&#13;&#10;                      new Object[]{success ? SUCCESSO : FALLITO, RIGHE_AFFECTED, rowsAffected});&#13;&#10;            return success;&#13;&#10;&#13;&#10;        } catch (SQLException e) {&#13;&#10;            logger.log(Level.SEVERE, &quot;Errore SQL durante inserimento prenotazione con codice volo&quot;, e);&#13;&#10;            return false;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Aggiorna una prenotazione esistente nel database.&#13;&#10;     * @param numeroBiglietto numero del biglietto&#13;&#10;     * @param nuovoNomePasseggero nuovo nome del passeggero&#13;&#10;     * @param nuovoPostoAssegnato nuovo posto assegnato&#13;&#10;     * @return true se aggiornata con successo, false altrimenti&#13;&#10;     */&#13;&#10;    @Override&#13;&#10;    public boolean update(String numeroBiglietto, String nuovoNomePasseggero, String nuovoPostoAssegnato) {&#13;&#10;        String querySQL = &quot;UPDATE public.\&quot;prenotazione\&quot; SET \&quot;nome_passeggero\&quot; = ?, \&quot;posto_assegnato\&quot; = ?, \&quot;stato_prenotazione\&quot; = ? WHERE \&quot;numero_biglietto\&quot; = ?&quot;;&#13;&#10;&#13;&#10;        try (PreparedStatement updatePrenotazionePS = connection.prepareStatement(querySQL)) {&#13;&#10;            updatePrenotazionePS.setString(1, nuovoNomePasseggero);&#13;&#10;            updatePrenotazionePS.setString(2, nuovoPostoAssegnato);&#13;&#10;            updatePrenotazionePS.setString(3, StatoPrenotazione.IN_ATTESA.name());&#13;&#10;            updatePrenotazionePS.setString(4, numeroBiglietto);&#13;&#10;&#13;&#10;            int rowsAffected = updatePrenotazionePS.executeUpdate();&#13;&#10;&#13;&#10;            boolean success = rowsAffected &gt; 0;&#13;&#10;            logger.log(Level.INFO, &quot;Aggiornamento prenotazione: {0}{1}{2}&quot;,&#13;&#10;                      new Object[]{success ? SUCCESSO : FALLITO, RIGHE_AFFECTED, rowsAffected});&#13;&#10;            return success;&#13;&#10;&#13;&#10;        } catch (SQLException e) {&#13;&#10;            logger.log(Level.SEVERE, &quot;Errore durante l'aggiornamento della prenotazione&quot;, e);&#13;&#10;            return false;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Elimina una prenotazione dal database.&#13;&#10;     * @param numeroBiglietto numero del biglietto&#13;&#10;     * @return true se eliminata con successo, false altrimenti&#13;&#10;     */&#13;&#10;    @Override&#13;&#10;    public boolean delete(String numeroBiglietto) {&#13;&#10;        String querySQL = &quot;DELETE FROM public.\&quot;prenotazione\&quot; WHERE \&quot;numero_biglietto\&quot; = ?&quot;;&#13;&#10;&#13;&#10;        try (PreparedStatement deletePrenotazionePS = connection.prepareStatement(querySQL)) {&#13;&#10;            deletePrenotazionePS.setString(1, numeroBiglietto);&#13;&#10;            int rowsAffected = deletePrenotazionePS.executeUpdate();&#13;&#10;            return rowsAffected &gt; 0;&#13;&#10;        } catch (SQLException e) {&#13;&#10;            logger.log(Level.SEVERE, &quot;Errore durante l'eliminazione della prenotazione&quot;, e);&#13;&#10;            return false;&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/dao/postgres/UtenteImplementazionePostgresDAO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/dao/postgres/UtenteImplementazionePostgresDAO.java" />
              <option name="originalContent" value="package dao.postgres;&#10;&#10;import dao.UtenteDAO;&#10;import dao.util.ConnessioneDatabase;&#10;import model.utenti.Utente;&#10;import model.utenti.Amministratore;&#10;import model.utenti.UtenteGenerico;&#10;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.logging.Logger;&#10;import java.util.logging.Level;&#10;&#10;// ******************************************************************************************&#10;//  ******************** CLASSE UTENTE IMPLEMENTAZIONE POSTGRES DAO *************************&#10;//   ******************************************************************************************&#10;&#10;/**&#10; * Implementazione PostgreSQL del DAO per gli Utenti.&#10; * Segue le indicazioni del professore per l'uso di JDBC.&#10; */&#10;public class UtenteImplementazionePostgresDAO implements UtenteDAO {&#10;    /** Logger per la classe. */&#10;    private static final Logger logger = Logger.getLogger(UtenteImplementazionePostgresDAO.class.getName());&#10;&#10;    /** Costanti per i tipi di utente. */&#10;    private static final String AMMINISTRATORE = &quot;AMMINISTRATORE&quot;;&#10;    private static final String UTENTE_GENERICO = &quot;UTENTE_GENERICO&quot;;&#10;&#10;    /** Connessione al database. */&#10;    private Connection connection;&#10;&#10;    /**&#10;     * Costruttore che inizializza la connessione al database.&#10;     */&#10;    public UtenteImplementazionePostgresDAO() {&#10;        try {&#10;            connection = ConnessioneDatabase.getInstance().connection;&#10;        } catch (SQLException e) {&#10;            logger.log(Level.SEVERE, &quot;Errore durante l'inizializzazione della connessione al database&quot;, e);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Restituisce la lista di tutti gli utenti presenti nel database.&#10;     * @return lista di utenti&#10;     */&#10;    @Override&#10;    public List&lt;Utente&gt; findAll() {&#10;        List&lt;Utente&gt; utenti = new ArrayList&lt;&gt;();&#10;        String querySQL = &quot;SELECT \&quot;login\&quot;, \&quot;password\&quot;, \&quot;ruolo\&quot; FROM public.\&quot;utente\&quot;&quot;;&#10;&#10;        try (PreparedStatement query = connection.prepareStatement(querySQL);&#10;             ResultSet rs = query.executeQuery()) {&#10;&#10;            while (rs.next()) {&#10;                String login = rs.getString(&quot;login&quot;);&#10;                String password = rs.getString(&quot;password&quot;);&#10;                String tipoUtente = rs.getString(&quot;ruolo&quot;);&#10;&#10;                Utente utente;&#10;                if (AMMINISTRATORE.equals(tipoUtente)) {&#10;                    utente = new Amministratore(login, password);&#10;                } else {&#10;                    utente = new UtenteGenerico(login, password);&#10;                }&#10;                utenti.add(utente);&#10;            }&#10;        } catch (SQLException e) {&#10;            logger.log(Level.SEVERE, &quot;Errore durante il recupero degli utenti&quot;, e);&#10;        }&#10;&#10;        return utenti;&#10;    }&#10;&#10;    /**&#10;     * Trova un utente tramite login e password.&#10;     * @param login login dell'utente&#10;     * @param password password dell'utente&#10;     * @return l'utente trovato, null se non esiste&#10;     */&#10;    @Override&#10;    public Utente findByLoginAndPassword(String login, String password) {&#10;        String querySQL = &quot;SELECT \&quot;login\&quot;, \&quot;password\&quot;, \&quot;ruolo\&quot; FROM public.\&quot;utente\&quot; WHERE \&quot;login\&quot; = ? AND \&quot;password\&quot; = ?&quot;;&#10;&#10;        try (PreparedStatement query = connection.prepareStatement(querySQL)) {&#10;            query.setString(1, login);&#10;            query.setString(2, password);&#10;&#10;            try (ResultSet rs = query.executeQuery()) {&#10;                if (rs.next()) {&#10;                    String tipoUtente = rs.getString(&quot;ruolo&quot;);&#10;&#10;                    if (AMMINISTRATORE.equals(tipoUtente)) {&#10;                        return new Amministratore(login, password);&#10;                    } else {&#10;                        return new UtenteGenerico(login, password);&#10;                    }&#10;                }&#10;            }&#10;        } catch (SQLException e) {&#10;            logger.log(Level.SEVERE, &quot;Errore durante la ricerca dell'utente&quot;, e);&#10;        }&#10;&#10;        return null;&#10;    }&#10;&#10;    /**&#10;     * Salva un nuovo utente nel database.&#10;     * @param utente utente da salvare&#10;     * @return true se salvato con successo, false altrimenti&#10;     */&#10;    @Override&#10;    public boolean save(Utente utente) {&#10;        String tipoUtente = (utente instanceof Amministratore) ? AMMINISTRATORE : UTENTE_GENERICO;&#10;        String querySQL = &quot;INSERT INTO public.\&quot;utente\&quot; (\&quot;login\&quot;, \&quot;password\&quot;, \&quot;ruolo\&quot;) VALUES (?, ?, ?)&quot;;&#10;&#10;        try (PreparedStatement addUtentePS = connection.prepareStatement(querySQL)) {&#10;            addUtentePS.setString(1, utente.getLogin());&#10;            addUtentePS.setString(2, utente.getPassword());&#10;            addUtentePS.setString(3, tipoUtente);&#10;&#10;            int rowsAffected = addUtentePS.executeUpdate();&#10;            return rowsAffected &gt; 0;&#10;        } catch (SQLException e) {&#10;            logger.log(Level.SEVERE, &quot;Errore durante il salvataggio dell'utente&quot;, e);&#10;            return false;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Aggiorna un utente esistente nel database.&#10;     * @param utente utente da aggiornare&#10;     * @return true se aggiornato con successo, false altrimenti&#10;     */&#10;    @Override&#10;    public boolean update(Utente utente) {&#10;        String tipoUtente = (utente instanceof Amministratore) ? AMMINISTRATORE : UTENTE_GENERICO;&#10;        String querySQL = &quot;UPDATE public.\&quot;utente\&quot; SET \&quot;password\&quot; = ?, \&quot;ruolo\&quot; = ? WHERE \&quot;login\&quot; = ?&quot;;&#10;&#10;        try (PreparedStatement updateUtentePS = connection.prepareStatement(querySQL)) {&#10;            updateUtentePS.setString(1, utente.getPassword());&#10;            updateUtentePS.setString(2, tipoUtente);&#10;            updateUtentePS.setString(3, utente.getLogin());&#10;&#10;            int rowsAffected = updateUtentePS.executeUpdate();&#10;            return rowsAffected &gt; 0;&#10;        } catch (SQLException e) {&#10;            logger.log(Level.SEVERE, &quot;Errore durante l'aggiornamento dell'utente&quot;, e);&#10;            return false;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Elimina un utente dal database.&#10;     * @param login login dell'utente da eliminare&#10;     * @return true se eliminato con successo, false altrimenti&#10;     */&#10;    @Override&#10;    public boolean delete(String login) {&#10;        String querySQL = &quot;DELETE FROM public.\&quot;utente\&quot; WHERE \&quot;login\&quot; = ?&quot;;&#10;&#10;        try (PreparedStatement deleteUtentePS = connection.prepareStatement(querySQL)) {&#10;            deleteUtentePS.setString(1, login);&#10;            int rowsAffected = deleteUtentePS.executeUpdate();&#10;            return rowsAffected &gt; 0;&#10;        } catch (SQLException e) {&#10;            logger.log(Level.SEVERE, &quot;Errore durante l'eliminazione dell'utente&quot;, e);&#10;            return false;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package dao.postgres;&#10;&#10;import dao.UtenteDAO;&#10;import dao.util.ConnessioneDatabase;&#10;import model.utenti.Utente;&#10;import model.utenti.Amministratore;&#10;import model.utenti.UtenteGenerico;&#10;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.logging.Logger;&#10;import java.util.logging.Level;&#10;&#10;// ******************************************************************************************&#10;//  ******************** CLASSE UTENTE IMPLEMENTAZIONE POSTGRES DAO *************************&#10;//   ******************************************************************************************&#10;&#10;/**&#10; * Implementazione PostgreSQL del DAO per gli Utenti.&#10; * Segue le indicazioni del professore per l'uso di JDBC.&#10; */&#10;public class UtenteImplementazionePostgresDAO implements UtenteDAO {&#10;    /** Logger per la classe. */&#10;    private static final Logger logger = Logger.getLogger(UtenteImplementazionePostgresDAO.class.getName());&#10;&#10;    /** Costanti per i tipi di utente. */&#10;    private static final String AMMINISTRATORE = &quot;AMMINISTRATORE&quot;;&#10;    private static final String UTENTE_GENERICO = &quot;UTENTE_GENERICO&quot;;&#10;&#10;    /** Connessione al database. */&#10;    private Connection connection;&#10;&#10;    /**&#10;     * Costruttore che inizializza la connessione al database.&#10;     */&#10;    public UtenteImplementazionePostgresDAO() {&#10;        try {&#10;            connection = ConnessioneDatabase.getInstance().getConnection();&#10;        } catch (SQLException e) {&#10;            logger.log(Level.SEVERE, &quot;Errore durante l'inizializzazione della connessione al database&quot;, e);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Restituisce la lista di tutti gli utenti presenti nel database.&#10;     * @return lista di utenti&#10;     */&#10;    @Override&#10;    public List&lt;Utente&gt; findAll() {&#10;        List&lt;Utente&gt; utenti = new ArrayList&lt;&gt;();&#10;        String querySQL = &quot;SELECT \&quot;login\&quot;, \&quot;password\&quot;, \&quot;ruolo\&quot; FROM public.\&quot;utente\&quot;&quot;;&#10;&#10;        try (PreparedStatement query = connection.prepareStatement(querySQL);&#10;             ResultSet rs = query.executeQuery()) {&#10;&#10;            while (rs.next()) {&#10;                String login = rs.getString(&quot;login&quot;);&#10;                String password = rs.getString(&quot;password&quot;);&#10;                String tipoUtente = rs.getString(&quot;ruolo&quot;);&#10;&#10;                Utente utente;&#10;                if (AMMINISTRATORE.equals(tipoUtente)) {&#10;                    utente = new Amministratore(login, password);&#10;                } else {&#10;                    utente = new UtenteGenerico(login, password);&#10;                }&#10;                utenti.add(utente);&#10;            }&#10;        } catch (SQLException e) {&#10;            logger.log(Level.SEVERE, &quot;Errore durante il recupero degli utenti&quot;, e);&#10;        }&#10;&#10;        return utenti;&#10;    }&#10;&#10;    /**&#10;     * Trova un utente tramite login e password.&#10;     * @param login login dell'utente&#10;     * @param password password dell'utente&#10;     * @return l'utente trovato, null se non esiste&#10;     */&#10;    @Override&#10;    public Utente findByLoginAndPassword(String login, String password) {&#10;        String querySQL = &quot;SELECT \&quot;login\&quot;, \&quot;password\&quot;, \&quot;ruolo\&quot; FROM public.\&quot;utente\&quot; WHERE \&quot;login\&quot; = ? AND \&quot;password\&quot; = ?&quot;;&#10;&#10;        try (PreparedStatement query = connection.prepareStatement(querySQL)) {&#10;            query.setString(1, login);&#10;            query.setString(2, password);&#10;&#10;            try (ResultSet rs = query.executeQuery()) {&#10;                if (rs.next()) {&#10;                    String tipoUtente = rs.getString(&quot;ruolo&quot;);&#10;&#10;                    if (AMMINISTRATORE.equals(tipoUtente)) {&#10;                        return new Amministratore(login, password);&#10;                    } else {&#10;                        return new UtenteGenerico(login, password);&#10;                    }&#10;                }&#10;            }&#10;        } catch (SQLException e) {&#10;            logger.log(Level.SEVERE, &quot;Errore durante la ricerca dell'utente&quot;, e);&#10;        }&#10;&#10;        return null;&#10;    }&#10;&#10;    /**&#10;     * Salva un nuovo utente nel database.&#10;     * @param utente utente da salvare&#10;     * @return true se salvato con successo, false altrimenti&#10;     */&#10;    @Override&#10;    public boolean save(Utente utente) {&#10;        String tipoUtente = (utente instanceof Amministratore) ? AMMINISTRATORE : UTENTE_GENERICO;&#10;        String querySQL = &quot;INSERT INTO public.\&quot;utente\&quot; (\&quot;login\&quot;, \&quot;password\&quot;, \&quot;ruolo\&quot;) VALUES (?, ?, ?)&quot;;&#10;&#10;        try (PreparedStatement addUtentePS = connection.prepareStatement(querySQL)) {&#10;            addUtentePS.setString(1, utente.getLogin());&#10;            addUtentePS.setString(2, utente.getPassword());&#10;            addUtentePS.setString(3, tipoUtente);&#10;&#10;            int rowsAffected = addUtentePS.executeUpdate();&#10;            return rowsAffected &gt; 0;&#10;        } catch (SQLException e) {&#10;            logger.log(Level.SEVERE, &quot;Errore durante il salvataggio dell'utente&quot;, e);&#10;            return false;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Aggiorna un utente esistente nel database.&#10;     * @param utente utente da aggiornare&#10;     * @return true se aggiornato con successo, false altrimenti&#10;     */&#10;    @Override&#10;    public boolean update(Utente utente) {&#10;        String tipoUtente = (utente instanceof Amministratore) ? AMMINISTRATORE : UTENTE_GENERICO;&#10;        String querySQL = &quot;UPDATE public.\&quot;utente\&quot; SET \&quot;password\&quot; = ?, \&quot;ruolo\&quot; = ? WHERE \&quot;login\&quot; = ?&quot;;&#10;&#10;        try (PreparedStatement updateUtentePS = connection.prepareStatement(querySQL)) {&#10;            updateUtentePS.setString(1, utente.getPassword());&#10;            updateUtentePS.setString(2, tipoUtente);&#10;            updateUtentePS.setString(3, utente.getLogin());&#10;&#10;            int rowsAffected = updateUtentePS.executeUpdate();&#10;            return rowsAffected &gt; 0;&#10;        } catch (SQLException e) {&#10;            logger.log(Level.SEVERE, &quot;Errore durante l'aggiornamento dell'utente&quot;, e);&#10;            return false;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Elimina un utente dal database.&#10;     * @param login login dell'utente da eliminare&#10;     * @return true se eliminato con successo, false altrimenti&#10;     */&#10;    @Override&#10;    public boolean delete(String login) {&#10;        String querySQL = &quot;DELETE FROM public.\&quot;utente\&quot; WHERE \&quot;login\&quot; = ?&quot;;&#10;&#10;        try (PreparedStatement deleteUtentePS = connection.prepareStatement(querySQL)) {&#10;            deleteUtentePS.setString(1, login);&#10;            int rowsAffected = deleteUtentePS.executeUpdate();&#10;            return rowsAffected &gt; 0;&#10;        } catch (SQLException e) {&#10;            logger.log(Level.SEVERE, &quot;Errore durante l'eliminazione dell'utente&quot;, e);&#10;            return false;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/dao/postgres/VoloImplementazionePostgresDAO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/dao/postgres/VoloImplementazionePostgresDAO.java" />
              <option name="originalContent" value="package dao.postgres;&#10;&#10;import dao.VoloDAO;&#10;import dao.util.ConnessioneDatabase;&#10;import model.volo.*;&#10;&#10;import java.sql.*;&#10;import java.time.Duration;&#10;import java.time.LocalDate;&#10;import java.time.LocalTime;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.logging.Logger;&#10;import java.util.logging.Level;&#10;&#10;/**&#10; * Implementazione PostgreSQL del DAO per i Voli.&#10; * Segue le indicazioni del professore per l'uso di JDBC.&#10; */&#10;public class VoloImplementazionePostgresDAO implements VoloDAO {&#10;    /** Logger per la classe. */&#10;    private static final Logger logger = Logger.getLogger(VoloImplementazionePostgresDAO.class.getName());&#10;&#10;    /** Costanti per i messaggi di log. */&#10;    private static final String SUCCESSO = &quot;SUCCESSO&quot;;&#10;    private static final String FALLITO = &quot;FALLITO&quot;;&#10;    private static final String RIGHE_AFFECTED = &quot; - Righe affected: &quot;;&#10;&#10;    /** Connessione al database. */&#10;    private Connection connection;&#10;&#10;    /**&#10;     * Costruttore che inizializza la connessione al database.&#10;     */&#10;    public VoloImplementazionePostgresDAO() {&#10;        try {&#10;            connection = ConnessioneDatabase.getInstance().connection;&#10;        } catch (SQLException e) {&#10;            logger.log(Level.SEVERE, &quot;Errore durante l'inizializzazione della connessione al database&quot;, e);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Volo&gt; findAll() {&#10;        List&lt;Volo&gt; voli = new ArrayList&lt;&gt;();&#10;        String querySQL = &quot;SELECT \&quot;codice_volo\&quot;, \&quot;compagnia_aerea\&quot;, \&quot;data_volo\&quot;, \&quot;orario_volo\&quot;, \&quot;ritardo_minuti\&quot;, \&quot;stato_volo\&quot;, \&quot;tipo_volo\&quot;, \&quot;aeroporto_origine\&quot;, \&quot;aeroporto_destinazione\&quot;, \&quot;numero_gate\&quot; FROM public.\&quot;volo\&quot;&quot;;&#10;&#10;        try (PreparedStatement query = connection.prepareStatement(querySQL);&#10;             ResultSet rs = query.executeQuery()) {&#10;&#10;            while (rs.next()) {&#10;                Volo volo = createVoloFromResultSet(rs);&#10;                voli.add(volo);&#10;            }&#10;        } catch (SQLException e) {&#10;            logger.log(Level.SEVERE, &quot;Errore durante il recupero dei voli&quot;, e);&#10;        }&#10;&#10;        return voli;&#10;    }&#10;&#10;    @Override&#10;    public Volo findByCodice(String codiceVolo) {&#10;        String querySQL = &quot;SELECT \&quot;codice_volo\&quot;, \&quot;compagnia_aerea\&quot;, \&quot;data_volo\&quot;, \&quot;orario_volo\&quot;, \&quot;ritardo_minuti\&quot;, \&quot;stato_volo\&quot;, \&quot;tipo_volo\&quot;, \&quot;aeroporto_origine\&quot;, \&quot;aeroporto_destinazione\&quot;, \&quot;numero_gate\&quot; FROM public.\&quot;volo\&quot; WHERE UPPER(\&quot;codice_volo\&quot;) = UPPER(?)&quot;;&#10;&#10;        try (PreparedStatement stmt = connection.prepareStatement(querySQL)) {&#10;            stmt.setString(1, codiceVolo.trim());&#10;&#10;            try (ResultSet rs = stmt.executeQuery()) {&#10;                if (rs.next()) {&#10;                    return createVoloFromResultSet(rs);&#10;                }&#10;            }&#10;        } catch (SQLException e) {&#10;            logger.log(Level.SEVERE, &quot;Errore durante la ricerca del volo&quot;, e);&#10;        }&#10;&#10;        return null;&#10;    }&#10;&#10;    @Override&#10;    public boolean save(Volo volo) {&#10;        String querySQL = &quot;INSERT INTO public.\&quot;volo\&quot; (\&quot;codice_volo\&quot;, \&quot;compagnia_aerea\&quot;, \&quot;data_volo\&quot;, \&quot;orario_volo\&quot;, \&quot;ritardo_minuti\&quot;, \&quot;stato_volo\&quot;, \&quot;tipo_volo\&quot;, \&quot;aeroporto_origine\&quot;, \&quot;aeroporto_destinazione\&quot;, \&quot;numero_gate\&quot;, \&quot;amministratore_login\&quot;) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)&quot;;&#10;&#10;        try (PreparedStatement addVoloPS = connection.prepareStatement(querySQL)) {&#10;            addVoloPS.setString(1, volo.getCodiceVolo());&#10;            addVoloPS.setString(2, volo.getCompagniaAerea());&#10;            addVoloPS.setDate(3, Date.valueOf(volo.getDataVolo()));&#10;            addVoloPS.setTime(4, Time.valueOf(volo.getOrarioVolo()));&#10;            addVoloPS.setLong(5, 0); // Ritardo fisso a 0 per ora&#10;            addVoloPS.setString(6, &quot;PROGRAMMATO&quot;); // Stato fisso per ora&#10;            addVoloPS.setString(7, volo instanceof VoloInPartenza ? &quot;PARTENZA&quot; : &quot;ARRIVO&quot;);&#10;&#10;            if (volo instanceof VoloInArrivo voloInArrivo) {&#10;                addVoloPS.setString(8, voloInArrivo.getAeroportoOrigine());&#10;                addVoloPS.setNull(9, Types.VARCHAR);&#10;                addVoloPS.setNull(10, Types.SMALLINT);&#10;            } else if (volo instanceof VoloInPartenza voloPartenza) {&#10;                addVoloPS.setNull(8, Types.VARCHAR);&#10;                addVoloPS.setString(9, voloPartenza.getAeroportoDestinazione());&#10;                if (voloPartenza.getGate() != null) {&#10;                    addVoloPS.setShort(10, voloPartenza.getGate().getNumeroGate());&#10;                } else {&#10;                    addVoloPS.setNull(10, Types.SMALLINT);&#10;                }&#10;            }&#10;&#10;            addVoloPS.setString(11, &quot;admin&quot;);&#10;            int rowsAffected = addVoloPS.executeUpdate();&#10;&#10;            boolean success = rowsAffected &gt; 0;&#10;            logger.log(Level.INFO, &quot;Inserimento volo: {0}{1}{2}&quot;,&#10;                      new Object[]{success ? SUCCESSO : FALLITO, RIGHE_AFFECTED, rowsAffected});&#10;            return success;&#10;&#10;        } catch (SQLException e) {&#10;            logger.log(Level.SEVERE, &quot;Errore SQL durante inserimento volo&quot;, e);&#10;            return false;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean update(String codiceVolo, LocalTime nuovoOrario, Duration nuovoRitardo, StatoVolo nuovoStato) {&#10;        String querySQL = &quot;UPDATE public.\&quot;volo\&quot; SET \&quot;orario_volo\&quot; = ?, \&quot;ritardo_minuti\&quot; = ?, \&quot;stato_volo\&quot; = ? WHERE \&quot;codice_volo\&quot; = ?&quot;;&#10;&#10;        try (PreparedStatement updateVoloPS = connection.prepareStatement(querySQL)) {&#10;            updateVoloPS.setTime(1, Time.valueOf(nuovoOrario));&#10;            updateVoloPS.setLong(2, nuovoRitardo.toMinutes());&#10;            updateVoloPS.setString(3, nuovoStato.name());&#10;            updateVoloPS.setString(4, codiceVolo);&#10;&#10;            int rowsAffected = updateVoloPS.executeUpdate();&#10;            return rowsAffected &gt; 0;&#10;        } catch (SQLException e) {&#10;            logger.log(Level.SEVERE, &quot;Errore durante l'aggiornamento del volo&quot;, e);&#10;            return false;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean delete(String codiceVolo) {&#10;        String querySQL = &quot;DELETE FROM public.\&quot;volo\&quot; WHERE \&quot;codice_volo\&quot; = ?&quot;;&#10;&#10;        try (PreparedStatement deleteVoloPS = connection.prepareStatement(querySQL)) {&#10;            deleteVoloPS.setString(1, codiceVolo);&#10;            int rowsAffected = deleteVoloPS.executeUpdate();&#10;            return rowsAffected &gt; 0;&#10;        } catch (SQLException e) {&#10;            logger.log(Level.SEVERE, &quot;Errore durante l'eliminazione del volo&quot;, e);&#10;            return false;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean updateGate(String codiceVolo, short numeroGate) {&#10;        String querySQL = &quot;UPDATE public.\&quot;volo\&quot; SET \&quot;numero_gate\&quot; = ? WHERE \&quot;codice_volo\&quot; = ?&quot;;&#10;&#10;        try (PreparedStatement updateGatePS = connection.prepareStatement(querySQL)) {&#10;            updateGatePS.setShort(1, numeroGate);&#10;            updateGatePS.setString(2, codiceVolo);&#10;&#10;            int rowsAffected = updateGatePS.executeUpdate();&#10;            boolean success = rowsAffected &gt; 0;&#10;&#10;            logger.log(Level.INFO, &quot;Aggiornamento gate per volo {0}: {1}{2}{3}&quot;,&#10;                      new Object[]{codiceVolo, success ? SUCCESSO : FALLITO, RIGHE_AFFECTED, rowsAffected});&#10;&#10;            return success;&#10;        } catch (SQLException e) {&#10;            logger.log(Level.SEVERE, &quot;Errore durante l'aggiornamento del gate&quot;, e);&#10;            return false;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Metodo di utilità per creare un volo a partire da un resultset.&#10;     * @param rs Il resultset.&#10;     * @return Il volo creato.&#10;     * @throws SQLException Se si verifica un errore SQL&#10;     */&#10;    private Volo createVoloFromResultSet(ResultSet rs) throws SQLException {&#10;        String codiceVolo = rs.getString(&quot;codice_volo&quot;);&#10;        String compagniaAerea = rs.getString(&quot;compagnia_aerea&quot;);&#10;        LocalDate dataVolo = rs.getDate(&quot;data_volo&quot;).toLocalDate();&#10;        LocalTime orarioVolo = rs.getTime(&quot;orario_volo&quot;).toLocalTime();&#10;        Duration ritardoVolo = Duration.ofMinutes(rs.getInt(&quot;ritardo_minuti&quot;));&#10;        String tipoVolo = rs.getString(&quot;tipo_volo&quot;);&#10;&#10;        Volo volo;&#10;        if (&quot;PARTENZA&quot;.equals(tipoVolo)) {&#10;            String aeroportoDestinazione = rs.getString(&quot;aeroporto_destinazione&quot;);&#10;            volo = new VoloInPartenza(codiceVolo, compagniaAerea, dataVolo, orarioVolo, ritardoVolo, aeroportoDestinazione);&#10;&#10;            short numeroGate = rs.getShort(&quot;numero_gate&quot;);&#10;            if (!rs.wasNull()) {&#10;                ((VoloInPartenza) volo).setGate(new Gate(numeroGate));&#10;            }&#10;        } else {&#10;            String aeroportoOrigine = rs.getString(&quot;aeroporto_origine&quot;);&#10;            volo = new VoloInArrivo(codiceVolo, compagniaAerea, dataVolo, orarioVolo, ritardoVolo, aeroportoOrigine);&#10;        }&#10;&#10;        String statoStr = rs.getString(&quot;stato_volo&quot;);&#10;        if (statoStr != null) {&#10;            volo.setStatoDelVolo(StatoVolo.valueOf(statoStr));&#10;        }&#10;&#10;        return volo;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package dao.postgres;&#13;&#10;&#13;&#10;import dao.VoloDAO;&#13;&#10;import dao.util.ConnessioneDatabase;&#13;&#10;import model.volo.*;&#13;&#10;&#13;&#10;import java.sql.*;&#13;&#10;import java.time.Duration;&#13;&#10;import java.time.LocalDate;&#13;&#10;import java.time.LocalTime;&#13;&#10;import java.util.ArrayList;&#13;&#10;import java.util.List;&#13;&#10;import java.util.logging.Logger;&#13;&#10;import java.util.logging.Level;&#13;&#10;&#13;&#10;/**&#13;&#10; * Implementazione PostgreSQL del DAO per i Voli.&#13;&#10; * Segue le indicazioni del professore per l'uso di JDBC.&#13;&#10; */&#13;&#10;public class VoloImplementazionePostgresDAO implements VoloDAO {&#13;&#10;    /** Logger per la classe. */&#13;&#10;    private static final Logger logger = Logger.getLogger(VoloImplementazionePostgresDAO.class.getName());&#13;&#10;&#13;&#10;    /** Costanti per i messaggi di log. */&#13;&#10;    private static final String SUCCESSO = &quot;SUCCESSO&quot;;&#13;&#10;    private static final String FALLITO = &quot;FALLITO&quot;;&#13;&#10;    private static final String RIGHE_AFFECTED = &quot; - Righe affected: &quot;;&#13;&#10;&#13;&#10;    /** Connessione al database. */&#13;&#10;    private Connection connection;&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Costruttore che inizializza la connessione al database.&#13;&#10;     */&#13;&#10;    public VoloImplementazionePostgresDAO() {&#13;&#10;        try {&#13;&#10;            connection = ConnessioneDatabase.getInstance().getConnection();&#13;&#10;        } catch (SQLException e) {&#13;&#10;            logger.log(Level.SEVERE, &quot;Errore durante l'inizializzazione della connessione al database&quot;, e);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public List&lt;Volo&gt; findAll() {&#13;&#10;        List&lt;Volo&gt; voli = new ArrayList&lt;&gt;();&#13;&#10;        String querySQL = &quot;SELECT \&quot;codice_volo\&quot;, \&quot;compagnia_aerea\&quot;, \&quot;data_volo\&quot;, \&quot;orario_volo\&quot;, \&quot;ritardo_minuti\&quot;, \&quot;stato_volo\&quot;, \&quot;tipo_volo\&quot;, \&quot;aeroporto_origine\&quot;, \&quot;aeroporto_destinazione\&quot;, \&quot;numero_gate\&quot; FROM public.\&quot;volo\&quot;&quot;;&#13;&#10;&#13;&#10;        try (PreparedStatement query = connection.prepareStatement(querySQL);&#13;&#10;             ResultSet rs = query.executeQuery()) {&#13;&#10;&#13;&#10;            while (rs.next()) {&#13;&#10;                Volo volo = createVoloFromResultSet(rs);&#13;&#10;                voli.add(volo);&#13;&#10;            }&#13;&#10;        } catch (SQLException e) {&#13;&#10;            logger.log(Level.SEVERE, &quot;Errore durante il recupero dei voli&quot;, e);&#13;&#10;        }&#13;&#10;&#13;&#10;        return voli;&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public Volo findByCodice(String codiceVolo) {&#13;&#10;        String querySQL = &quot;SELECT \&quot;codice_volo\&quot;, \&quot;compagnia_aerea\&quot;, \&quot;data_volo\&quot;, \&quot;orario_volo\&quot;, \&quot;ritardo_minuti\&quot;, \&quot;stato_volo\&quot;, \&quot;tipo_volo\&quot;, \&quot;aeroporto_origine\&quot;, \&quot;aeroporto_destinazione\&quot;, \&quot;numero_gate\&quot; FROM public.\&quot;volo\&quot; WHERE UPPER(\&quot;codice_volo\&quot;) = UPPER(?)&quot;;&#13;&#10;&#13;&#10;        try (PreparedStatement stmt = connection.prepareStatement(querySQL)) {&#13;&#10;            stmt.setString(1, codiceVolo.trim());&#13;&#10;&#13;&#10;            try (ResultSet rs = stmt.executeQuery()) {&#13;&#10;                if (rs.next()) {&#13;&#10;                    return createVoloFromResultSet(rs);&#13;&#10;                }&#13;&#10;            }&#13;&#10;        } catch (SQLException e) {&#13;&#10;            logger.log(Level.SEVERE, &quot;Errore durante la ricerca del volo&quot;, e);&#13;&#10;        }&#13;&#10;&#13;&#10;        return null;&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public boolean save(Volo volo) {&#13;&#10;        String querySQL = &quot;INSERT INTO public.\&quot;volo\&quot; (\&quot;codice_volo\&quot;, \&quot;compagnia_aerea\&quot;, \&quot;data_volo\&quot;, \&quot;orario_volo\&quot;, \&quot;ritardo_minuti\&quot;, \&quot;stato_volo\&quot;, \&quot;tipo_volo\&quot;, \&quot;aeroporto_origine\&quot;, \&quot;aeroporto_destinazione\&quot;, \&quot;numero_gate\&quot;, \&quot;amministratore_login\&quot;) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)&quot;;&#13;&#10;&#13;&#10;        try (PreparedStatement addVoloPS = connection.prepareStatement(querySQL)) {&#13;&#10;            addVoloPS.setString(1, volo.getCodiceVolo());&#13;&#10;            addVoloPS.setString(2, volo.getCompagniaAerea());&#13;&#10;            addVoloPS.setDate(3, Date.valueOf(volo.getDataVolo()));&#13;&#10;            addVoloPS.setTime(4, Time.valueOf(volo.getOrarioVolo()));&#13;&#10;            addVoloPS.setLong(5, 0); // Ritardo fisso a 0 per ora&#13;&#10;            addVoloPS.setString(6, &quot;PROGRAMMATO&quot;); // Stato fisso per ora&#13;&#10;            addVoloPS.setString(7, volo instanceof VoloInPartenza ? &quot;PARTENZA&quot; : &quot;ARRIVO&quot;);&#13;&#10;&#13;&#10;            if (volo instanceof VoloInArrivo voloInArrivo) {&#13;&#10;                addVoloPS.setString(8, voloInArrivo.getAeroportoOrigine());&#13;&#10;                addVoloPS.setNull(9, Types.VARCHAR);&#13;&#10;                addVoloPS.setNull(10, Types.SMALLINT);&#13;&#10;            } else if (volo instanceof VoloInPartenza voloPartenza) {&#13;&#10;                addVoloPS.setNull(8, Types.VARCHAR);&#13;&#10;                addVoloPS.setString(9, voloPartenza.getAeroportoDestinazione());&#13;&#10;                if (voloPartenza.getGate() != null) {&#13;&#10;                    addVoloPS.setShort(10, voloPartenza.getGate().getNumeroGate());&#13;&#10;                } else {&#13;&#10;                    addVoloPS.setNull(10, Types.SMALLINT);&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;            addVoloPS.setString(11, &quot;admin&quot;);&#13;&#10;            int rowsAffected = addVoloPS.executeUpdate();&#13;&#10;&#13;&#10;            boolean success = rowsAffected &gt; 0;&#13;&#10;            logger.log(Level.INFO, &quot;Inserimento volo: {0}{1}{2}&quot;,&#13;&#10;                      new Object[]{success ? SUCCESSO : FALLITO, RIGHE_AFFECTED, rowsAffected});&#13;&#10;            return success;&#13;&#10;&#13;&#10;        } catch (SQLException e) {&#13;&#10;            logger.log(Level.SEVERE, &quot;Errore SQL durante inserimento volo&quot;, e);&#13;&#10;            return false;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public boolean update(String codiceVolo, LocalTime nuovoOrario, Duration nuovoRitardo, StatoVolo nuovoStato) {&#13;&#10;        String querySQL = &quot;UPDATE public.\&quot;volo\&quot; SET \&quot;orario_volo\&quot; = ?, \&quot;ritardo_minuti\&quot; = ?, \&quot;stato_volo\&quot; = ? WHERE \&quot;codice_volo\&quot; = ?&quot;;&#13;&#10;&#13;&#10;        try (PreparedStatement updateVoloPS = connection.prepareStatement(querySQL)) {&#13;&#10;            updateVoloPS.setTime(1, Time.valueOf(nuovoOrario));&#13;&#10;            updateVoloPS.setLong(2, nuovoRitardo.toMinutes());&#13;&#10;            updateVoloPS.setString(3, nuovoStato.name());&#13;&#10;            updateVoloPS.setString(4, codiceVolo);&#13;&#10;&#13;&#10;            int rowsAffected = updateVoloPS.executeUpdate();&#13;&#10;            return rowsAffected &gt; 0;&#13;&#10;        } catch (SQLException e) {&#13;&#10;            logger.log(Level.SEVERE, &quot;Errore durante l'aggiornamento del volo&quot;, e);&#13;&#10;            return false;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public boolean delete(String codiceVolo) {&#13;&#10;        String querySQL = &quot;DELETE FROM public.\&quot;volo\&quot; WHERE \&quot;codice_volo\&quot; = ?&quot;;&#13;&#10;&#13;&#10;        try (PreparedStatement deleteVoloPS = connection.prepareStatement(querySQL)) {&#13;&#10;            deleteVoloPS.setString(1, codiceVolo);&#13;&#10;            int rowsAffected = deleteVoloPS.executeUpdate();&#13;&#10;            return rowsAffected &gt; 0;&#13;&#10;        } catch (SQLException e) {&#13;&#10;            logger.log(Level.SEVERE, &quot;Errore durante l'eliminazione del volo&quot;, e);&#13;&#10;            return false;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public boolean updateGate(String codiceVolo, short numeroGate) {&#13;&#10;        String querySQL = &quot;UPDATE public.\&quot;volo\&quot; SET \&quot;numero_gate\&quot; = ? WHERE \&quot;codice_volo\&quot; = ?&quot;;&#13;&#10;&#13;&#10;        try (PreparedStatement updateGatePS = connection.prepareStatement(querySQL)) {&#13;&#10;            updateGatePS.setShort(1, numeroGate);&#13;&#10;            updateGatePS.setString(2, codiceVolo);&#13;&#10;&#13;&#10;            int rowsAffected = updateGatePS.executeUpdate();&#13;&#10;            boolean success = rowsAffected &gt; 0;&#13;&#10;&#13;&#10;            logger.log(Level.INFO, &quot;Aggiornamento gate per volo {0}: {1}{2}{3}&quot;,&#13;&#10;                      new Object[]{codiceVolo, success ? SUCCESSO : FALLITO, RIGHE_AFFECTED, rowsAffected});&#13;&#10;&#13;&#10;            return success;&#13;&#10;        } catch (SQLException e) {&#13;&#10;            logger.log(Level.SEVERE, &quot;Errore durante l'aggiornamento del gate&quot;, e);&#13;&#10;            return false;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Metodo di utilità per creare un volo a partire da un resultset.&#13;&#10;     * @param rs Il resultset.&#13;&#10;     * @return Il volo creato.&#13;&#10;     * @throws SQLException Se si verifica un errore SQL&#13;&#10;     */&#13;&#10;    private Volo createVoloFromResultSet(ResultSet rs) throws SQLException {&#13;&#10;        String codiceVolo = rs.getString(&quot;codice_volo&quot;);&#13;&#10;        String compagniaAerea = rs.getString(&quot;compagnia_aerea&quot;);&#13;&#10;        LocalDate dataVolo = rs.getDate(&quot;data_volo&quot;).toLocalDate();&#13;&#10;        LocalTime orarioVolo = rs.getTime(&quot;orario_volo&quot;).toLocalTime();&#13;&#10;        Duration ritardoVolo = Duration.ofMinutes(rs.getInt(&quot;ritardo_minuti&quot;));&#13;&#10;        String tipoVolo = rs.getString(&quot;tipo_volo&quot;);&#13;&#10;&#13;&#10;        Volo volo;&#13;&#10;        if (&quot;PARTENZA&quot;.equals(tipoVolo)) {&#13;&#10;            String aeroportoDestinazione = rs.getString(&quot;aeroporto_destinazione&quot;);&#13;&#10;            volo = new VoloInPartenza(codiceVolo, compagniaAerea, dataVolo, orarioVolo, ritardoVolo, aeroportoDestinazione);&#13;&#10;&#13;&#10;            short numeroGate = rs.getShort(&quot;numero_gate&quot;);&#13;&#10;            if (!rs.wasNull()) {&#13;&#10;                ((VoloInPartenza) volo).setGate(new Gate(numeroGate));&#13;&#10;            }&#13;&#10;        } else {&#13;&#10;            String aeroportoOrigine = rs.getString(&quot;aeroporto_origine&quot;);&#13;&#10;            volo = new VoloInArrivo(codiceVolo, compagniaAerea, dataVolo, orarioVolo, ritardoVolo, aeroportoOrigine);&#13;&#10;        }&#13;&#10;&#13;&#10;        String statoStr = rs.getString(&quot;stato_volo&quot;);&#13;&#10;        if (statoStr != null) {&#13;&#10;            volo.setStatoDelVolo(StatoVolo.valueOf(statoStr));&#13;&#10;        }&#13;&#10;&#13;&#10;        return volo;&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>